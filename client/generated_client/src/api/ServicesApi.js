/*
 * AREA
 * Area for epitech
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Action} from '../model/Action';
import {Reaction} from '../model/Reaction';
import {Service} from '../model/Service';

/**
* Services service.
* @module api/ServicesApi
* @version 1.0.0
*/
export class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the servicesGet operation.
     * @callback moduleapi/ServicesApi~servicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all services
     * @param {module:api/ServicesApi~servicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    servicesGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Service];

      return this.apiClient.callApi(
        '/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the servicesServiceIdActionsGet operation.
     * @callback moduleapi/ServicesApi~servicesServiceIdActionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Action>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves actions of a service
     * @param {String} serviceId the id of the service
     * @param {module:api/ServicesApi~servicesServiceIdActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    servicesServiceIdActionsGet(serviceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling servicesServiceIdActionsGet");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Action];

      return this.apiClient.callApi(
        '/services/{serviceId}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the servicesServiceIdReactionsGet operation.
     * @callback moduleapi/ServicesApi~servicesServiceIdReactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves reactions of a service
     * @param {String} serviceId the id of the service
     * @param {module:api/ServicesApi~servicesServiceIdReactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    servicesServiceIdReactionsGet(serviceId, callback) {
      
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling servicesServiceIdReactionsGet");
      }

      let pathParams = {
        'serviceId': serviceId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];

      return this.apiClient.callApi(
        '/services/{serviceId}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}