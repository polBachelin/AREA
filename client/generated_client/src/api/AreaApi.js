/*
 * AREA
 * Area for epitech
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Area} from '../model/Area';

/**
* Area service.
* @module api/AreaApi
* @version 1.0.0
*/
export class AreaApi {

    /**
    * Constructs a new AreaApi. 
    * @alias module:api/AreaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the areaAreaIdDelete operation.
     * @callback moduleapi/AreaApi~areaAreaIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an area
     * @param {Number} areaId ID of the area to delete
     * @param {module:api/AreaApi~areaAreaIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    areaAreaIdDelete(areaId, callback) {
      
      let postBody = null;
      // verify the required parameter 'areaId' is set
      if (areaId === undefined || areaId === null) {
        throw new Error("Missing the required parameter 'areaId' when calling areaAreaIdDelete");
      }

      let pathParams = {
        'areaId': areaId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/area/{areaId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the areaAreaIdGet operation.
     * @callback moduleapi/AreaApi~areaAreaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Area{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the info of an Area
     * @param {Number} areaId ID of the area to get
     * @param {module:api/AreaApi~areaAreaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    areaAreaIdGet(areaId, callback) {
      
      let postBody = null;
      // verify the required parameter 'areaId' is set
      if (areaId === undefined || areaId === null) {
        throw new Error("Missing the required parameter 'areaId' when calling areaAreaIdGet");
      }

      let pathParams = {
        'areaId': areaId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Area;

      return this.apiClient.callApi(
        '/area/{areaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the areaAreaIdPut operation.
     * @callback moduleapi/AreaApi~areaAreaIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user area
     * @param {Number} areaId Id of the area to update
     * @param {module:model/Area} areaObject updated area object
     * @param {module:api/AreaApi~areaAreaIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    areaAreaIdPut(areaId, areaObject, callback) {
      
      let postBody = null;
      // verify the required parameter 'areaId' is set
      if (areaId === undefined || areaId === null) {
        throw new Error("Missing the required parameter 'areaId' when calling areaAreaIdPut");
      }
      // verify the required parameter 'areaObject' is set
      if (areaObject === undefined || areaObject === null) {
        throw new Error("Missing the required parameter 'areaObject' when calling areaAreaIdPut");
      }

      let pathParams = {
        'areaId': areaId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'areaObject': areaObject
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/area/{areaId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the areaCreateGet operation.
     * @callback moduleapi/AreaApi~areaCreateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an empty area
     * @param {module:api/AreaApi~areaCreateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    areaCreateGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/area/create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the areaCreatePost operation.
     * @callback moduleapi/AreaApi~areaCreatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an area with info
     * @param {Object} opts Optional parameters
     * @param {module:model/Area} opts.areaObject 
     * @param {module:api/AreaApi~areaCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    areaCreatePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'areaObject': opts['areaObject']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/area/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAreas operation.
     * @callback moduleapi/AreaApi~getAreasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Area{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all logged in user areas
     * Returns a map of areas
     * @param {module:api/AreaApi~getAreasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAreas(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Area;

      return this.apiClient.callApi(
        '/area', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}